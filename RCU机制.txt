参考链接：
https://www.cnblogs.com/qcloud1001/p/7755331.html

RCU（Read-Copy-Update，读-复制-更新）
RCU的读端没有锁、内存屏障、原子指令类的开销，几乎可以认为是直接读

RCU的写执行单元在访问它的共享资源前首先复制一个副本，然后对副本进行修改，最后使用一个回调机制在适当的“时机”把指向原来数据的指针重新指向新的被修改的数据。

这个“时机”就是所有引用该数据的CPU都退出对共享数据读操作的时候。等待适当时机的这一时期称为宽限期（Grace Period）。

RCU的优势就是既允许多个读执行单元同时访问被保护的数据，又允许多个读执行单元和多个写执行单元同时访问被保护的数据；但是其存在对多个写执行单元同步存在较大开销，必须使用某种锁机制来同步并发的其他写执行单元的修改操作

Linux中提供的RCU操作
（1）读锁定、解锁
rcu_read_lock()
rcu_read_lock_bh()

rcu_read_unlock()
rcu_read_unlock_bh()

示例：
rcu_read_lock()
.../* 读临界区 */
rcu_read_unlock(

（2）同步RCU
synchronize_rcu()

该函数由RCU写执行单元调用，它将阻塞写执行单元，直到当前CPU上所有的已经存在（Ongoing）的读执行单元完成读临界区，写执行单元才可以继续下一步操作。

（3）挂接回调
void call_rcu(struct rcu_head *head, void (*func)(struct rcu_head *rcu));

由写执行单元调用，它不会使写执行单元阻塞，因而可以在中断上下文或软中断中使用。挂接的回调函数会在一个宽限期结束（即所有已经存在的RCU读临界区完成）后被执行。











