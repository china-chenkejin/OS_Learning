Linux自旋锁的主要操作：
（1）定义自旋锁：	spinlock_t lock;
（2）初始化自旋锁：spin_lock_init(lock)
（3）获取自旋锁：	spin_lock(lock)	spin_trylock(lock) 	//后者非原地自旋，会返回false
（4）释放自旋锁：	spin_unlock(lock)

自旋锁主要针对SMP或单CPU但内核可抢占的情况，对于单CPU和内核不支持抢占的系统，自旋锁退化为空操作。
在多核SMP的情况下，任何一个核拿到了自旋锁，该核上的抢占调度也暂时禁止了（本CPU的任务和其他CPU的任务都不能再进入锁的临界区），但是没有禁止另外一个核的抢占调度。

自旋锁衍生
——目的：防止锁的临界区受到中断和底半部的影响（原有锁不能屏蔽中断和底半部）
——方法：结合开/关中断、开/关底半部
关中断 local_irq_disable（）、开中断 local_irq_enable（）、关底半部local_bh_disable（）、
开底半部 local_bh_enable（）、关中断并保存状态字 local_irq_save（）、
开中断并恢复状态字 local_irq_restore（）

spin_lock_irq() = spin_lock() + local_irq_disable()
spin_unlock_irq() = spin_unlock() + local_irq_enable()
spin_lock_irqsave() = spin_lock() + local_irq_save()
spin_unlock_irqrestore() = spin_unlock() + local_irq_restore()
spin_lock_bh() = spin_lock() + local_bh_disable()
spin_unlock_bh() = spin_unlock() + local_bh_enable()

在多核场景下，如果进程和中断可能访问同一片临界资源，通常需要在进程上下文中调用
spin_lock_irqsave（）/spin_unlock_irqrestore（）
在中断上下文中通常使用 spin_lock（）/spin_unlock（）进行临界资源保护

自旋锁使用注意：
（1）由于是忙等锁，使用不当可能会导致CPU利用率较低从而降低系统性能
（2）自旋锁可能导致系统死锁，比如递归使用一个自旋锁
（3）在自旋锁锁定期间不能调用可能引起进程调度的函数，比如在临界代码区中调用copy_from_user（）、copy_to_user（）、kmalloc（）和msleep（）等可能导致进程阻塞的函数
（4）为了保持代码的一致性，单核情况最好也在中断中调用 spin_lock（）


读写自旋锁（rwlock）
基本原理：读写自旋锁是一种比自旋锁粒度更小的锁机制，它保留了“自旋”的概念，但是在写操作方面，只能最多有1个写进程，在读操作方面，同时可以有多个读执行单元。当然，读和写也不能同时进行。
允许多个读者同时进入临界区； 读者与写者不能同时进入临界区（读者与写者互斥）；写者与写者不能同时进入临界区（写者与写者互斥）；
其和读写信号量的区别在于：后者可能会发生睡眠，进而带来进程切换的开销

定义和初始化读写自旋锁
rwlock_t my_rwlock;
rwlock_init(&my_rwlock);

读锁定
void read_lock(rwlock_t *lock);
void read_lock_irqsave(rwlock_t *lock, unsigned long flags);
void read_lock_irq(rwlock_t *lock);
void read_lock_bh(rwlock_t *lock);

读解锁
void read_unlock(rwlock_t *lock);
void read_unlock_irqrestore(rwlock_t *lock, unsigned long flags);
void read_unlock_irq(rwlock_t *lock);
void read_unlock_bh(rwlock_t *lock)

写锁定
void write_lock(rwlock_t *lock);
void write_lock_irqsave(rwlock_t *lock, unsigned long flags);
void write_lock_irq(rwlock_t *lock);
void write_lock_bh(rwlock_t *lock);
int write_trylock(rwlock_t *lock);

写解锁
void write_unlock(rwlock_t *lock);
void write_unlock_irqrestore(rwlock_t *lock, unsigned long flags);
void write_unlock_irq(rwlock_t *lock);
void write_unlock_bh(rwlock_t *lock);

顺序锁（seqlock）
它是针对读写锁的一种优化，即读执行单元和写执行单元之间不再互斥，但是写执行单元与写执行单元之间仍然是互斥的。但是还需要注意的是：如果读执行单元在读操作期间，写执行单元已经发生了写操作，那么，读执行单元必须重新读取数据，以便确保得到的数据是完整的。所以可能出现出现多次读取的动作被执行。有两种情况：先写，写的过程中去读；写读，读的过程中发生了写操作。这两种情况都需要读执行单元能够重读数据。

写执行获得顺序锁
void write_seqlock(seqlock_t *sl);
int write_tryseqlock(seqlock_t *sl);
write_seqlock_irqsave(lock, flags)
write_seqlock_irq(lock)
write_seqlock_bh(lock)

write_seqlock_irqsave() = loal_irq_save() + write_seqlock()
write_seqlock_irq() = local_irq_disable() + write_seqlock()
write_seqlock_bh() = local_bh_disable() + write_seqlock()

写执行释放顺序锁
void write_sequnlock(seqlock_t *sl);
write_sequnlock_irqrestore(lock, flags)
write_sequnlock_irq(lock)
write_sequnlock_bh(lock)

write_sequnlock_irqrestore() = write_sequnlock() + local_irq_restore()
write_sequnlock_irq() = write_sequnlock() + local_irq_enable()
write_sequnlock_bh() = write_sequnlock() + local_bh_enable()

其中写执行单元和自旋锁的使用相同

读执行获取顺序锁
（1）读开始
unsigned read_seqbegin(const seqlock_t *sl); //函数返回顺序锁s1的当前顺序号
read_seqbegin_irqsave(lock, flags) = local_irq_save() + read_seqbegin()

（2）重读
读执行单元在访问完被顺序锁s1保护的共享资源后需要调用该函数来检查，在读访问期间是否有写操作。如果有需要重读。

int read_seqretry(const seqlock_t *sl, unsigned iv);
read_seqretry_irqrestore(lock, iv, flags) = read_seqretry() + local_irq_restore()
典型应用：
do {
      seqnum = read_seqbegin(&seqlock_a);
      /* 读操作代码块*/
      ...
} while (read_seqretry(&seqlock_a, seqnum));











